Nyan
hemni276 julma873


Nyan är ett imperativt språk. Språket ska inspireras av katter och ljuden 
de gör, exempel på koden kan se ut som följande:

mao ^While_print^:								//function
    prrr ^i < 0^:								//while-loop
     	meow ^"utskrift"^						//print
     	?nya? ^i < 0^:							//if-statement
			meow ^"youve been meowed"^			//print
		:3										//end
	:3											//end
:3												//end
				
Funktionaliteten ska likna python på vissa sätt, speciellt när man passerar 
variabler in i en funktion, då de kommer agera som referenser. En skillnad är att
vi planerar att ha statisk typning så att vi kan använda kattansikten för att 
deklarera typer. Hur dessa ansikten används beskrivs här: 

^w^ "hello"		//str
^3^ 42 			//int
^.^ 3.14 		//float
^oo^ false 		//bool

list=[]

Scope:

Vi väljer att använda ett statiskt scope. Med detta vill vi säga att variablers 
definitioner är baserade på vilket scope som funktionen ankallades i. 

BNF grammatik:
<program> ::= <component>

<component> ::= <blocks>

<blocks> ::= <block> | <blocks> <block>

<block> ::= <while> | <condition> | <functionCall> | <reassignment> | <function> | <assignment> | <print> | <expr>

<assignment> ::= <datatype> <variable> ''='' <value> ''~''

<reassignment> ::= <variable> ''+='' <value> ''~'' 
                   | <variable> ''-='' <value> ''~'' 
                   | <variable> ''='' <value> ''~''

<print> ::= :meow ''^'' <output> ''^'' '':'' <blocks> '';''

<function> ::= ''def'' <variable> ''^'' <params> ''^'' '':'' <blocks> '';''

<functionCall> ::= <variable> ''^'' <params> ''^''
                   | <variable> ''^'' ''^''

<params> ::= <variable> | <params> '','' <variable>

<condition> ::= ''if'' ''^'' <logicStmt> ''^'' '':'' <blocks> '';'' <conditionFollowup> | ''if'' ''^'' <logicStmt> ''^'' '':'' <blocks> '';''

<conditionFollowup> ::= ''else'' '':'' <blocks> 
                        | ''elseif'' ''^'' <logicStmt> ''^'' '':'' <blocks> <conditionFollowup>
                        | ''elseif'' ''^'' <logicStmt>''^'' '':'' <blocks>

<while> ::= :whileloop ''^'' <logicStmt> ''^'' '':'' <blocks> '';''

<logicStmt> ::= "not" <logicStmt> 
                | <logicStmt> ''and'' <logicStmt> 
                | <logicStmt> ''\&\&'' <logicStmt> 
                | <logicStmt> ''or'' <logicStmt> 
                | <logicStmt> ''||'' <logicStmt> 
                | <valueComp>

<valueComp> ::= <logicExpr> ''<'' <logicExpr> 
                | <logicExpr> ''>'' <logicExpr>     
                | <logicExpr> ''<='' <logicExpr> 
                | <logicExpr> ''>='' <logicExpr> 
                | <logicExpr> ''=='' <logicExpr> 
                | <logicExpr> ''!='' <logicExpr> 
                | <logicExpr>

<logicExpr> ::= <value> | <variable> | ''('' <logicStmt> '')''

<expr> ::= <expr> ''+'' <term> | <expr> ''-'' <term> | <term>

<term> ::= <term> ''\%'' <factor> | <term> ''//'' <factor> | <term> ''*'' <factor> | <term> ''/'' <factor> 

<factor> ::= <float> | <int> | <variable> | ''('' <expr> '')''

<output> ::= <value> | <variable> 

<datatype> ::= ''^w^''  
               | ''integer''
               | ''^.^''
               | ''^oo^''

<variable> 

<value> ::= <float> | <int> | <bool> | <string>

<string> ::= ".+"

<bool> ::= ''true'' | ''false''

<int> ::= \d+

<float> ::=